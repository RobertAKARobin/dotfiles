#!/bin/bash

alias gl='git log --decorate --graph --pretty=format:"%C(yellow)%h%Creset %C(auto)%d%Creset %Cblue%ar%Creset %Cred%an%Creset %n%w(72,1,2)%s"'
alias gla='git log --all --decorate --graph --pretty=format:"%C(yellow)%h%Creset %C(auto)%d%Creset %Cblue%ar%Creset %Cred%an%Creset %n%w(72,1,2)%s"'
alias reload='source ~/.bash_profile'
alias sas="sass --style expanded --watch --sourcemap=none"
alias jad="jade -Pw"
alias jek="jekyll serve -w"
alias dnsrefresh="sudo killall -HUP mDNSResponder"
alias math="bc -l"
alias sizeof="du -shL .* *"
# BFG clears stuff from Git history
# https://rtyley.github.io/bfg-repo-cleaner/
alias bfg="java -jar ~/bfg.jar"
alias chrome="open -a 'Google Chrome.app'"
alias search="sudo grep -nrilS"
alias json="jq"

useragent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"

COLOR_RED="\033]0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[0;34m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"

function figall(){
  filename="figlet.txt"
  figlist=$(figlist | tail -n +4)
  nl=$'\n'
  output=""
  while read -r font; do
    if [[ "$font" == "Figlet control files in this directory:"* ]]; then
      break
    fi
    output="$output### $font${nl}"
    output="$output$(figlet -f $font $1)${nl}${nl}"
  done <<< "$figlist"
  echo "$output" > $filename
}

function gh(){
  remote=${1:-origin}
  gitpfx='git@github.com:'
  urlpfx='https://www.github.com/'
  url=$(git remote get-url $remote | sed "s~$gitpfx~$urlpfx~" | sed "s~\.git\$~~")
  chrome $url
}

function git_branch(){
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"
  local has_unstaged="Changes not staged for commit"
  local has_staged="Changes to be committed"
  local unstaged_char=""
  local staged_char=""
  if [[ $git_status =~ $has_unstaged ]]; then
    unstaged_char=" *"
  fi
  if [[ $git_status =~ $has_staged ]]; then
    staged_char=" +"
  fi
  if [[ $git_status =~ $on_branch ]] || [[ $git_status =~ $on_commit ]]; then
    echo " (${BASH_REMATCH[1]}$unstaged_char$staged_char)"
  fi
}

function gnext(){
  git log --reverse --pretty=%H master | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
}

function gprev(){
  git checkout HEAD~
}

function grc(){
  git reset --soft HEAD~
  git add .
  git commit -C ORIG_HEAD
}

function gsearch(){
  git rev-list --all | xargs git grep -i $1
}

function ls-a(){
  echo ""
  echo "----------"
  ls -AF1 $1
  echo "----------"
  echo ""
}

#!/bin/bash

alias bfg="java -jar ~/bfg.jar" # clears stuff from Git history, https://rtyley.github.io/bfg-repo-cleaner/
alias chrome="open -a 'Google Chrome.app'"
alias dnsrefresh="sudo killall -HUP mDNSResponder"
alias jad="jade -Pw"
alias jek="jekyll serve -w"
alias json="jq"
alias math="bc -l"
alias ports='lsof -i -P | grep -i "listen"'
alias reload='source ~/.bash_profile'
alias sas="sass --style expanded --watch --sourcemap=none"
alias search="sudo grep -nrilS"

export desk="$HOME/Desktop"
export useragent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"
export w="$HOME/Programming/web"

games='/usr/share/emacs/22.1/lisp/play/'

function b64() {
  if [[ -n $2 ]]; then
    local flags=$1
    shift
  fi
  local string=$1
  c="echo -n \$(echo -n "$string" | base64 $flags) | pbcopy"
  echo ">>> $c"
  bash -c "$c"
  echo $(pbpaste)
}

function f() {
  local dowhat=$1
  local substring=$2
  local include=$3

  local ignore_dirs=(node_modules jspm_packages .git tmp .venv)
  local exclude_dirs=$(wrap "--exclude-dir=% " ${ignore_dirs[@]})
  local find_path=$include

  if [[ -z $find_path ]]; then
    local find_path="."
  fi

  local c=""
  case "$dowhat" in
    # Look for substring in files, return file names
    # e.g. `f tx "foo bar" ./some_directory`
    tx) c="fgrep -irl \"$substring\" . --include="./$include*" $exclude_dirs";;

    # Look for substring in files, return matching lines 
    # e.g. `f ln "foo bar" ./some_directory`
    ln) c="fgrep -ir \"$substring\" . --include="./$include*" $exclude_dirs";;
    
    # Look for regex in files, return file names
    # e.g. `f rx "foo b[ar]{2}" ./some_directory`
    rx) c="fgrep -irl -E \"$substring\" . $include $exclude_dirs";;

    # Look for regex in file names, return file names
    # e.g. `f fi "*\.ts" ./some_directory`
    fi) c="find $find_path -name $substring -print -o $(wrap "-path ./% -prune -o " ${ignore_dirs[@]}) -type f"
  esac

  if [[ -z $c ]]; then
    echo "$dowhat isn't a thing."
    return
  fi

  echo ">>> $c"
  bash -c "$c"
}

function figall(){
  filename="figlet.txt"
  figlist=$(figlist | tail -n +4)
  nl=$'\n'
  output=""
  while read -r font; do
    if [[ "$font" == "Figlet control files in this directory:"* ]]; then
      break
    fi
    output="$output### $font${nl}"
    output="$output$(figlet -f $font $1)${nl}${nl}"
  done <<< "$figlist"
  echo "$output" > $filename
}

function git_branch(){
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"
  local has_unstaged="Changes not staged for commit"
  local has_staged="Changes to be committed"
  local unstaged_char=""
  local staged_char=""
  if [[ $git_status =~ $has_unstaged ]]; then
    unstaged_char=" *"
  fi
  if [[ $git_status =~ $has_staged ]]; then
    staged_char=" +"
  fi
  if [[ $git_status =~ $on_branch ]] || [[ $git_status =~ $on_commit ]]; then
    echo " (${BASH_REMATCH[1]}$unstaged_char$staged_char)"
  fi
}

function g(){
  local abbv=$1
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local c=()
  shift
  case "$abbv" in
    a)  c=(add);;
    b)  c=(branch);;
    bDD) # Delete all local branches except the current one 
        git branch | grep -v \* | xargs git branch -D
        c=(branch)
        ;;
    c)  c=(checkout);;
    ca)
        local branch
        local branches=$(git branch -a --format "%(refname:lstrip=2)")
        select_from "$branches" branch
        c=(checkout $branch)
        ;;
    cp) c=(cherry-pick);;
    cpb)
        local branch=$1
        local sha=$(git merge-base HEAD $branch)
        c=(cherry-pick $sha..$branch)
        shift
        ;;
    d)  c=(diff);;
    dg) c=(diff --staged);;
    dgs)
        c=(diff --staged --stat);;
    dnew) # Diff from my last commit
        local author=$(git config user.name)
        local hash=$(git log --author=$author -1 --pretty=%h)
        c=(diff $hash..HEAD)
        ;;
    ds) c=(diff --stat);;
    dt) # diff be(t)ween
        local hash=$1
        local num_commits=$2
        c=(diff $hash~$num_commits..$hash)
        shift
        shift
        ;;
    dts)
        c=(diff --stat $1~$2..$1)
        shift
        shift
        ;;
    f)  c=(fetch);;
    fn)
        git rev-list --all | xargs git grep -i "$@"
        return
        ;;
    h)
        remote=${1:-origin}
        gitpfx='git@github.com:'
        urlpfx='https://www.github.com/'
        url=$(git remote get-url $remote | sed "s~$gitpfx~$urlpfx~" | sed "s~\.git\$~~")
        chrome $url
        ;;
    l)  c=(log --decorate --graph --pretty=format:"%C(yellow)%h%Creset %C(auto)%d%Creset %Cblue%ar%Creset %Cred%an%Creset %n%w(72,1,2)%s");;
    lme)
        local author=$(git config user.name)
        g l --author=$author
        return;;
    lf) g l --follow $@; return;;
    la) g l --all $@; return;;
    laf)
        g l --all --follow $2; return;;
    lc) c=(diff --name-only --diff-filter=U);; # List conflicted files
    m)  c=(commit);;
    mm) c=(commit -m);;
    ma) c=(commit --amend);;
    mA) c=(commit --amend -m);;
    mC) c=(commit -C ORIG_HEAD);;
    p)  c=(push);;
    pD) 
        local branch=$1
        shift
        if [ -z $branch ]; then
          local branch=$current_branch
        fi
        c=(push --delete origin $branch)
        ;;
    pu) c=(push -u origin $current_branch);;
    r)  c=(reset);;
    rc)
        local num_commits=$(git rev-list --count HEAD)
        local message="$(git log -1 --pretty=%B)"
        if [[ $num_commits == 1 ]]; then
          git update-ref -d HEAD
        else
          git reset --soft HEAD~
        fi
        git add .
        c=(commit -C ORIG_HEAD)
        ;;
    s)  c=(status);;
    u)  # undo
        git reset --soft head~$1
        shift
        c=(status)
        ;;
    U)
        git reset --soft head~$1
        shift
        git reset head .
        c=(status)
        ;;
    UH) c=(reset --hard head~$1)
        shift
        ;;
    sh) c=(show $1:./$2)
        shift
        shift
        ;;
    x)  c=(clean -fd);;
    # Clean everything including ignored files
    X)  c=(clean -xfd);;
    # Go to next commit
    ++)
        git log --reverse --pretty=%H | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
        return
        ;;
    # Go to previous commit
    --) c=(checkout HEAD~);;
  esac
  
  if [[ -z $c ]]; then
    c=$abbv
  fi
  echo ">>> git ${c[@]} $@"
  git "${c[@]}" "$@"
}

function happ(){
  heroku apps:destroy $1 --confirm $1
}

function lipsum() {
  local text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  echo -n $text | pbcopy
  echo "Copied!"
}

function ll(){
  echo ""
  echo "----------"
  ls -AF1 $1
  echo "----------"
  echo ""
}

function select_from(){
  local options=($1)
  local varname=$2
  local index
  local selection
  for index in "${!options[@]}"; do
    echo -e "$index\t${options[index]}"
  done
  read -n 2 index
  if [[ $index == "q" ]]; then
    return
  fi
  selection="${options[$index]}"
  eval $varname="$selection"
}

function sizeof(){
  if [[ $1 == "." ]] || [[ -z "$1" ]]; then
    du -hc -d 0 ./.[!.]* ./* 2>/dev/null
  elif [[ $1 == ".." ]]; then
    du -hc -d 0 ../.[!.]* ../* 2>/dev/null
  elif [[ -d $1 ]]; then
    dir=${1%/}
    du -hc -d 0 $dir/.[!.]* $dir/* 2>/dev/null
  else
    du -hc -d 0 $1 2>/dev/null
  fi
}

function sizeofs(){
  sizeof $1 | sort -h
}

function targz(){
  local dir=$(dirname "$1")
  local base=$(basename "$1")
  local fp="$base.tar.gz"
  rm -rf $fp
  tar -cvzf $fp $1
  mv $fp $dir
}

function wrap() {
  local wrapper=$1
  shift
  local output=""
  for item in "$@"; do
    output="$output${wrapper//%/$item}"
  done
  echo $output
}
